open build/OCaml
open tools/OMakeLibrary.om
DefineCommandVars()

.PHONY: build-all doc install uninstall


################################################################################
# General Project Information
PROJECT = redaw
VERSION = 0.0.0+master
DESCRIPTION = Reinvent the Dataset Wheel

if $(test -e .git)
    # this one works with quotes not the `None` one
    GIT_COMMIT = 'Some "$(shell git rev-parse HEAD)"'
    export
else
    GIT_COMMIT = None
    export

if $(test $(getenv WITH_BISECT, "") = true)
    echo "Using Bisect"
    BISECT_PACKAGE= bisect_ppx.fast
    export
else
    echo "Not using Bisect: " $(getenv WITH_BISECT, "")
    BISECT_PACKAGE=
    export

LIB_PACKAGES = yojson nonstd sosa cmdliner \
   ppx_deriving_yojson ppx_deriving.show $(BISECT_PACKAGE)

OCAMLFLAGS = -bin-annot -thread -short-paths -g \
             -strict-formats -strict-sequence -w +9 -safe-string

section # The library
    OCAMLPACKS[] = $(LIB_PACKAGES)
    _build/src/lib/metadata.ml: :value: $(VERSION)
        echo "(** Metadata generated at compile-time *)" > $@
        echo "let version = \"$(VERSION)\"" >> $@
        echo "let git_commit = $(GIT_COMMIT)" >> $@
    OCAML_GENERATED_MODULES[] = metadata
    .DEFAULT: $(OCamlPackedLibraryOfDir $(PROJECT), src/lib)

section # "main" application
    OCAML_LOCAL_LIBS += src/lib/$(PROJECT)
    OCAMLPACKS[] = $(LIB_PACKAGES)
    .DEFAULT: $(OCamlProgramOfDirectory $(PROJECT), $(dir src/app))

DotMerlin(./src, $(LIB_PACKAGES))

install: install-lib-$(PROJECT) install-app-$(PROJECT)
uninstall: uninstall-lib-$(PROJECT) uninstall-app-$(PROJECT)


.PHONY: doc test-env bisect-report bisect-clean


bisect-clean:
    rm -rf _report_dir bisect*.out

_report_dir:
    mkdir _report_dir

bisect-report: _report_dir
    bisect-ppx-report -I _build/src/lib/ \
                      -I _build/src/app/ -I _build/src/lwt_unit/  \
                      -verbose -html _report_dir  bisect*.out

DIRS[] = src/lib
LIBS[] = $(PROJECT)
DotOCamlinit($(DIRS), $(LIB_PACKAGES), $(LIBS))
